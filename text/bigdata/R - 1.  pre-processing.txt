0. Glossary
   Data Preprocessing == 
   Data Manipulation == 
   Data Handling == 
   Data Wrangling == 
   Data Munging
   

2. Use the below functions to pre-process
	(1) filter()		- Extract rows from data frame
	(2) select()		- Select columns from data frame
	(3) arrange()		- Sort column data
	(4) mutate()		- Add new Column to data frame
	(5) summarise()		- Generate Statistics
	(6) group_by()		- Divide by each group
	(7) left_join()		- Merge by Column
	(8) bind_rows()		- Merge by Row
	

3. Create a data frame to test
	> library(ggplot2)
	> data(mpg)
	> mpg <- as.data.frame(mpg)
	> View(mpg)
	
	
4. Load libraries for data preprocessing
	> library(dplyr)
	
	
5. 빈도표 by table() function using 논리연산자 and 산술연산자
	** Logical operators: <, <=, >, >=, ==, !=, |, &, %in% **
	** Arithmatic operators: +, -, *, /, (^ | **)(제곱), %/% (몫), %% (나머지) **

	> table(mpg$fl)
	> table(mpg$displ, mpg$drv)
	> table(mpg$manufacturer, mpg$fl)
	> table(mpg$disp)
	> table(mpg$disp>=3.3)
	> table(mpg$disp<=3.5)
	> table(mpg$disp<=3.5 & mpg$displ>=3.3)

	  
6. 특정 조건을 만족하는 행(rows) 추출 - filter() 함수
	** Pipe operator: %>%, Cntrol + Shift + M **
	
   	> mpg %>% filter(fl == 'e')
	> mpg %>% filter(drv=='f' & displ==1.6)
	> mpg %>% filter(fl=='p' & manufacturer=='audi')
	> mpg %>% filter(drv=='f' & displ==1.6 & fl!='r')
	> mpg %>% filter( hwy > 21 & hwy < 23
	> mpg %>% filter(manufacturer=='ford' & displ <= 4.0)
	> mpg %>% filter( drv %in% c('4','r') & class == 'subcompact')

	
7. Create new data by filtered rows

	> suv <- mpg %>% filter(class=='suv')


8. 특정 열(columns) 추출/제외 - select() 함수
	** Pipe operator: %>%, Cntrol + Shift + M **

	> mpg %>% select(fl)
	> mpg %>% select( fl, drv, cyl
	> mpg %>% select( -class
	> mpg %>% select( manufacturer, model, -year

9. 복합 조건을 만족하는 열 또는 행 추출하기
	** Pipe operator: %>%, Cntrol + Shift + M **

	> mpg %>% filter(model=='gti') %>% select( cyl, drv, fl, class )
	> mpg %>% select(manufacturer, model, fl) %>% filter(fl=='p')
	> mpg %>% 
+             select(manufacturer, model, fl) %>% 
+             filter(fl=='e')
	> mpg %>% 
+             filter(fl=='e') %>% 
+             select(manufacturer, model, fl)


10. 출력결과 행수 조절하기 - head()/tail() 함수
	> mpg %>% head
	> mpg %>% head()
	> mpg %>% filter(drv=='4') %>% head
	> mpg %>% filter(drv=='4') %>% head(10)
	> mpg %>% filter(drv=='4') %>% head(-10)

	> mpg %>% tail
	> mpg %>% tail()
	> mpg %>% tail(10)
	> mpg %>% filter(drv=='f') %>% tail
	> mpg %>% filter(drv=='f') %>% tail(10)
	> mpg %>% filter(drv=='f') %>% tail(-10)


11. 순서에 맞춰 정렬하기 - arrange() 함수

	> mpg %>% head
	> mpg %>% arrange %>% head
	> mpg %>% filter(cyl==4) %>% arrange(model) %>% head	# asc
	> mpg %>% filter(fl=='p') %>% head
	> mpg %>% filter(fl=='p') %>% arrange(hwy) %>% head		# asc
	> mpg %>% filter(fl=='p') %>% arrange(hwy) %>% head		# desc
	> mpg %>% filter(fl=='p') %>% arrange(displ, hwy) %>% head(20)	# multi. asc
	> mpg %>% filter(fl=='p') %>% arrange(desc(displ), hwy) %>% head(20)	# multi. desc
	> 


13. 파생변수 추가 - mutate() 함수
	** mutate( 파생변수명 = 파생공식 ) **

	> mpg %>% mutate(tot = cty + hwy) %>%  head
	> mpg %>% mutate(tot = cty + hwy) %>% mutate(avg = tot / 2) %>% head
	> mpg %>% mutate(tot = cty + hwy, avg = tot/2) %>%  head
	> mpg %>% mutate(tot=cty+hwy, avg=tot/2, grade=ifelse(avg>25.0,'A',ifelse(avg>23.0,'B','C'))) 
	> mpg %>% mutate(tot=cty+hwy) %>% arrange(tot) %>% head(10)
	> mpg %>% mutate(tot=cty+hwy) %>% arrange(desc(tot)) %>% head(10)


14. summarise by group - group_by() 함수 + summarise() 함수
	** 요약 통계량 함수: mean(), sd(), sum(), median(), min(), max(), n() **

	> mean(mpg$cty)
	> mpg %>% summarise(mean_cty=mean(cty))		# == mean(mpg$cty)
	
	> mpg
	> mpg %>% group_by(fl)		# == mpg
	> mpg %>% group_by(cyl) %>% summarise(avg_hwy=mean(hwy))
	> mpg %>% group_by(displ) %>% summarise(avg_cty=mean(cty))
	> mpg %>% group_by(fl, displ) %>% summarise(avg_cty=mean(cty))
	> mpg %>% group_by(fl) %>% summarise(mean_cty=mean(cty),sum_cty=sum(cty),median_cty=median(cty))
	> mpg %>% group_by(class) %>% summarise(count=n())	# n() like select id, count(*) from ~ group by id
	> mpg %>% group_by(class) %>% summarise(count=n(), mean_cty=mean(cty))
	> mpg %>% group_by(class) %>% summarise(count=n(), min(cty))
	> mpg %>% group_by(class) %>% summarise(count=n(), max(cty))
	> mpg %>% group_by(class) %>% summarise(count=n(), sd(cty))
	> mpg %>% group_by(class) %>% summarise(count=n(), sum(cty))
	> mpg %>% group_by(class) %>% summarise(count=n(), median(cty))
	> 


15. 데이터 합치기 - 가로: left_join() 함수 / 새로: bind_rows() 함수
	** 가로 : 기존 데이터에 컬럼(변수) 추가 **
	** 세로 : 기존 데이터에 로우(행) 추가 **


	* 가로(left_join) *

	> mid_test <- data.frame(id=c(1:5), sid=sample(1:5, replace=T), score=c(60,80,70,90,85))
	> fin_test <- data.frame(id=c(1:5), sid=sample(1:5, replace=T), score=c(70,83,65,95,80))

	> left_join(mid_test, fin_test, by='id')
	> left_join(mid_test, fin_test, by=c("id"))
	> left_join(mid_test, fin_test, by=c('id', 'sid'))
	> left_join(mid_test, fin_test, by=c('id', 'sid')) %>% filter(is.na(score.y))
	> left_join(mid_test, fin_test, by=c('id', 'sid')) %>% filter(!is.na(score.y))
	> bind_cols(mid_test, fin_test)


	* 세로(bind_rows) *

	> mid_test <- data.frame(id=c(1:5), score=c(60,80,70,90,85))
	> fin_test <- data.frame(id=c(1:5), score=c(70,83,65,95,80))

	> bind_rows(mid_test, fin_test)

	> mid_test <- data.frame(id=c(1:5), score1=c(60,80,70,90,85))
	> fin_test <- data.frame(id=c(1:5), score2=c(70,83,65,95,80))

	> bind_rows(mid_test, fin_test)


16. 데이터 정제
	** <NA> : character/Factor missing value	**
	**  NA 	: numeric missing value 			**
	** outlier : 이상치 or 극단치					**

    > test <- data.frame(id=c(1:5), score=c(70,,65,95,80))
	Error in c(70, , 65, 95, 80) : argument 2 is empty

	> test <- data.frame( gender=c('M','F',NA,'M','M'), score=c(90,87,88,NA,100))
	> test
	  gender score
	1      M    90
	2      F    87
	3   <NA>    88
	4      M    NA
	5      M   100
	> str(test)
	'data.frame':	5 obs. of  2 variables:
	 $ gender: Factor w/ 2 levels "F","M": 2 1 NA 2 2
	 $ score : num  90 87 88 NA 100
	>

	> test <- data.frame( gender=c('M','F',NA,'M','M'), score=c(90,87,88,NA,100), stringsAsFactors = F)
 	> test
	  gender score
	1      M    90
	2      F    87
	3   <NA>    88
	4      M    NA
	5      M   100
	> str(test)
	'data.frame':	5 obs. of  2 variables:
	 $ gender: chr  "M" "F" NA "M" ...
	 $ score : num  90 87 88 NA 100
	>

    (1) 결측치(missing value) 제거

       - 결측치 존재 확인: is.na( data ) 함수 ( TRUE: NA, FALSE: not NA )
       - 결측치 개수(빈도) 확인: table( is.na( data ) ) 함수

		> is.na( test )
		> test %>% is.na
		> test %>% is.na()
		     gender score
		[1,]  FALSE FALSE
		[2,]  FALSE FALSE
		[3,]   TRUE FALSE
		[4,]  FALSE  TRUE
		[5,]  FALSE FALSE
		> 
		> table( is.na( test ) )

		FALSE  TRUE 
		    8     2 
		> 

	   - 결측치 존재하는 변수 확인: 개별 변수별로 확인
	   	> table(is.na(test$score))
	   	> table(is.na(test$gender))
	   	> test %>% filter( is.na(score) | is.na(gender) )

	   - 결측치 행(row) 제거: Use filter( !is.na() )
	    > length(test)
		[1] 2
	   	> test %>% filter(!is.na(score) & !is.na(gender))	# Recommended
		  gender score
		1      M    90
		2      F    87
		3      M   100
	   	> na.omit(test)		# NOT recommended
		  gender score
		1      M    90
		2      F    87
		5      M   100
		>

		* na.rm = T/F 인자를 사용한 결측치 제거: 지원함수 제한적(mean, median, sum, ...)
		  -> So, filter() 함수 적용

	   - 결측치 대체:
	     ** 데이터: 큼, 결측치: 적음 		-> 결측치 제거/분석 	-> 무리가 적음
	     ** 데이터: 작음, 결측치: 많음	-> 결측치 제거/분석	-> 무리가 많음
	        : 많은 데이터 손실 -> 분석결과 왜곡
	        : 이를 보완하기 위해, 결측치 제거 대신, 다른 값으로 대체하기도 함 	
	        	-> 결측치 대체법(imputation)
	     ** 결측치 대체법: 
	     	(1) 평균or최빈값 같은 대표값을 구해, 모든 결측치를 하나의 값으로 일괄 대체
	     		> mean(test$score, na.rm = T)
	     		> test$score <- ifelse(is.na(test$score), 91, test$score)
				> test
				  gender score
				1      M    90
				2      F    87
				3   <NA>    88
				4      M    91*
				5      M   100
				> table( is.na(test$score) )

				FALSE 
				    5 
				> test$gender <- ifelse(is.na(test$gender), '', test$gender)
				> test
				  gender score
				1      M    90
				2      F    87
				3       *   88
				4      M    91
				5      M   100

	     	(2) 통계분석기법으로, 각 결측치의 예측값을 추정/대체하는 방법


    (2) 이상치(outlier) 제거
    	** 이상치/극단치가 포함: 분석결과 왜곡 -> 분석전 이상치(극단치) 제거 필요 **
    	** 이상치: 논리적으로 존재할 수 없는 값
    	** 극단치: 논리적으로 존재가능, 그러나 극단적으로 크거나 작은 값 

       	> outlier <- data.frame(sex=c(1,2,1,3,2,1), score=sample(1:115, 6))
       	> outlier
		  sex score
		1   1    31
		2   2    77
		3   1   111*
		4   3*   84
		5   2   102*
		6   1     6

       - 이상치 존재(빈도, 변수) 확인: table( 변수 ) 함수
		> table(outlier$score, outlier$sex)
		> table(outlier$sex)
		> table(outlier$score)

		  6  31  77  84 102 111 
		  1   1   1   1  1*  1* 
		> 

	   - 이상치 제거: 이상치 -> 결측치로 변환 후, 분석에서 제외
	   	 1) 결측치로 변환 : ifelse() 함수로, 이상치 -> NA or <NA>로 부여(변환)
			> outlier$sex <- ifelse(outlier$sex==3, NA, outlier$sex)
			> outlier$score <- ifelse(outlier$score > 100, NA, outlier$score)
			> outlier
			  sex score
			1   1    31
			2   2    77
			3   1    NA*
			4  NA*   84
			5   2    NA*
			6   1     6
			>

		 2) 결측치 제거: filter() 함수
			> na.omit(outlier)			#	1st. method
			  sex score
			1   1    31
			2   2    77
			6   1     6
			> outlier %>% filter(!is.na(sex) & !is.na(score))	# 2st. method
			  sex score
			1   1    31
			2   2    77
			3   1     6
			> outlier %>% 
			+	filter(!is.na(sex) & !is.na(score)) %>% 
			+	group_by(sex) %>% 
			+	summarise(mean_score=mean(score))
			# A tibble: 2 x 2
			    sex mean_score
			  <dbl>      <dbl>
			1     1       18.5
			2     2       77.0
			> 

	   - 극단치 제거: 
	   	1) 정상범위 설정 필요
           가. 논리적을 판단하여 결정
				예: 키 300cm (성인 키의 정상범위 - 150cm ~ 190cm)
		   나. 통계적 기준 적용
		   		예1: 상/하위 0.3% 에 포함되는 극단적으로 크거나/작으면 해당
                예2: +-3 표준편차에 포함되는 극단적으로 크거나/작으면 해당
                예3: boxplot을 이용해, 중심(median)에서 크게 벗어나면 해당 ( > boxplot(mpg$hwy) )
                     ( 뮤: 평균, 시그마: 편차, IQR=Q3-Q1 )

                  o  -
                     |- 극단치
                  o  - 

                 --- 	Q3 + 1.5 x IQR (극단치 경계)
                  |
                  |     윗수염( 하위 75 ~ 100% )
                  |
                ----- 	Q3 (하위 75%)
                |	|
            IQR |---| 	Median (하위 50%, 2Q)
                |	|
                ----- 	Q1 (하위 25%)
                  |    
                  |     아랫수염( 하위 0 ~ 25% )
                  |
                 ---	Q1 - 1.5 x IQR (극단치 경계)

		2) 설정한 정상범위를 벗어나는 경우 - 극단치로 분류
			> boxplot(mpg$cty)
			> boxplot(mpg$cty)$stats
			     [,1]
			[1,]    9	-> lowest border (= Q1-1.5*IQR)
			[2,]   14	-> Q1 (25%)
			[3,]   17	-> Q2 (= Median, 50%)
			[4,]   19	-> Q3 (75%)
			[5,]   26	-> highest border (= Q3+1.5*IQR)
			attr(,"class")
			        1 
			"integer" 
			> table(mpg$cty)
															   *  *  *  *
			 9 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 28 29 33 35 
			 5 20  8 21 19 24 19 16 26 20 11 23  4  3  5  2  3  2  1  1  1 
			> 
		3) 극단치 -> 결측처리
			> table(is.na(mpg$hwy))

			FALSE 
			  234 
			> boxplot(mpg$hwy)$stats
			     [,1]
			[1,]   12
			[2,]   18
			[3,]   24
			[4,]   27
			[5,]   37
			attr(,"class")
			        1 
			"integer" 
			> mpg$hwy <- ifelse(mpg$hwy < 12 | mpg$hwy > 37, NA, mpg$hwy)
			> table(mpg$hwy)
																					   *  *
			12 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 41 44 
			 5  2 10  7 31 10 13 11  2  7  7 13 15 32 14  7 22  4  7  4  2  1  2  2  1  1  2 
			> 
			> table(is.na(mpg$hwy))

			FALSE  TRUE 
			  231     3 
			> 
		4) 분석전에 결측치 제거하고, 분석 수행
			> mpg %>% group_by(drv) %>% summarise(mean_hwy=mean(hwy, na.rm=T))
			# A tibble: 3 x 2
			    drv mean_hwy
			  <chr>    <dbl>
			1     4 19.17476
			2     f 27.72816
			3     r 21.00000
			> ggplot2::mpg %>% group_by(drv) %>% summarise(mean_hwy=mean(hwy, na.rm=T))
			# A tibble: 3 x 2
			    drv mean_hwy
			  <chr>    <dbl>
			1     4 19.17476
			2     f 28.16038*
			3     r 21.00000
			> 