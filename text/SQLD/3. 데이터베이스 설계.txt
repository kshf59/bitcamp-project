데이터베이스
  - 컴퓨터 세계의 데이터로 변환하기 위한 데이터베이스 모델링 과정

데이터베이스 생명주기
  - 요구 조건 분석 단계
  - 설계 단계
  - 구현 단계
  - 운영 단계
  - 감시와 개선 단계

데이터베이스 설계 단계
  1. 요구 조건 분석
    - 요구 조건 명세서 작성
  2. 개념적 설계
    - 개념 스키마, 트랜잭션, 모델링, E-R모델
  3. 논리적 설계
    - 목표 DBMS에 맞는 스키마 설계
  4. 물리적 설계
    - 목표 DBMS에 맞는 물리적 구조의 데이터로 변환
  5. 구현
    - 특정 DBMS의 DDL로 데이터베이스 생성 

-------------------------------------------------------------------------------------------------------------------------------------

요구 조건 분석 단계
  - 시스템의 운영상태 등을 분석하고 사용자들의 요구사항에 대한 분석까지 포함하는 단계

-------------------------------------------------------------------------------------------------------------------------------------

개념적 설계 단계
  - DBMS에 독립적이고 고차원적인 표현 기법으로 기술
      데이터베이스 요구 사항들 -> 개념적 설계 -> 개념적 스키마 ER 스키마

ERD의 표현 방법

CASE
  tip - CASE(Computer Aided Software Engineering) 도구는 프로그램을 개발하는데 사용되는 프로그램 자동화 도구이다. 일반적인 프로그램 툴과의
        차이점은 CASE도구는 개발 방법론에 입각한 프로그래밍 자동화 도구라는 점이다.

엔티티 도출

엔티티
  - 업무의 관심 대상이 되는 정보를 갖고 있거나, 그에 대한 정보를 관리할 필요가 있는 유형
  - 무형의 사물(엔티티)

주 식별자
  - 엔티티에 소속된 인스턴스들을 구분하는 기준이 되는 속성
    정의 : 만일 어떤 속성 X가 엔티티의 주 식별자라면 그 엔티티에 속한 모든 인스턴스들의 속성 X값을 비교했을 때 중복된 값이 나타나지 않아야 한다.

관계
  - 두 엔티티 타입 사이의 관계를 의미한다. 업무의 흐름을 제대로 파악해야만 관계를 도출
    정의 : 어떤 엔티티 A의 정보가 만들어지기 위해서는 다른 엔티티 B의 정보를 필요로 하는 관계에 있을때 엔티티 B는 엔티티 A와 관계를 가지며 엔티티 B는
           엔티티 A의 부모 엔티티가 된다.

외래 식별자의 정의
  - 부서와 사원 엔티티 간의 관계 도출
    정의  : 1. 관계가 있는 두 엔티티를 부모, 자식으로 구분한다.
            2. 부모 엔티티의 주 식별자 속성을 자식이 가지고 있는지를 확인(없으면 추가) 한다.

-------------------------------------------------------------------------------------------------------------------------------------

논리적 설계 단계
  - 데이터베이스 관리 시스템의 종류에 따라 관계 데이터 모델
  - 네트워크 데이터 모델, 계층 데이터 모델

개념적스키마, ER스키마 -> 논리적 설계 -> 논리적 스키마, 관계 데이터베이스 스키마

-------------------------------------------------------------------------------------------------------------------------------------

물리적 설계 단계

물리적 설계 과정
  사용 DBMS 결정 -> 데이터 타입 크기 결정 -> 데이터 용량 및 설계 및 업무 프로세스 분석 -> 역정규화 -> 무결성 제약조건 정의 -> 인덱스 정의 -> 데이터베이스 생성

물리적 설계시 고려사항
  - 응답시간의 최소화
  - 저장 공간의 효율화
  - 트랜잭션 처리도(처리 능력)

자료 검색 방법
  - FTS(Full Table Scan)방법
      테이블을 처음부터 끝까지 검색하는 방법
  - 인덱스 스캔(Index Scan)방법
      인덱스를 통해 부분 검색을 하여 인덱스에 저장된 테이블의 ROWID를 가지고 테이블을 검색한 후 정보를 가져오는 검색 방법

인덱스의 종류

  - 논리적 구분에 따른 인덱스

    단일칼럼 인덱스와 결합인덱스
      - 단일칼럼 인덱스 
          한개의 칼럼으로 생선된 인덱스
      - 결합 인덱스
          두개 이상의 칼럼으로 생선된 인덱스, 최대 32개 칼럼의 조합으로 구성할수 있지만,일반적으로 10개 이하의 칼럼 조합으로 생성
    유니크 인덱스 와 논-유니크 인덱스
      - 유니크 인덱스
          모든 유니크 및 기본키 제약조건 생성 시 자동으로 유니크 인덱스가 생선된다.
      - 논-유니크 인덱스
          논-유니크 인덱스 대상 칼럼은 중복된 값을 가질 수있다. 테이블의 칼럼 값이 중복되지 않도록 보장하기 위해서는 논-유니크 인덱스보다는
          유니크 제약조건으로 지정하여 칼럼 값의 고유 값을 보장하는 것이 더 좋다.
    함수기반 인덱스
      - 함수기반 인덱스
          인덱스에 포함된 1개 이상의 칼럼이 함수 또는 수식을 사용하여 생성된 경우를 말하며, 인덱스로 저장되기 전에 값이 계산 된다.
          함수기반 인덱스는 B-tree 또는 Bitmap Index로 생성된다.
          오라클의 경우 버전 8.1x부터 사용할수 있다.
      
  - 물리적 구분에 따른 인덱스

    B-tree 구조 인덱스
      - 일반적으로 생성되는 인덱스는 거의 대부분이 B-tree 구조의 인덱스로 생성된다.
      - 같은 키 값을 가지고 있는 Row가 여러 개이면 키 값이 반복된다.
      - 모든 칼럼 값이 Null일 경우에는 인덱스는 만들어지지 않는다.
      - DML 문장의 WHERE절에 자주 나오는 칼럼에 대하여 데이터의 분포도가 테이블 전체의 약 10~15% 이내의 범위일때, 인덱스를 생성한다.
      - 하나의 테이블에 인덱스를 많이 만들면 UPDATE, DELETE 작업의 실행 속도가 느려진다.
      - 한 개의 테이블에는 3~4개의 인덱스가 적당하다.
    비트맵 인덱스
      - 인덱스 칼럼의 정보를 0과 1의 값으로 표현하여 데이터를 검색할 때 사용되는 SQL문의 WHERE절에 정의된 AND, OR 연산자에 의해 AND연산, OR연산
        을 실행하여 데이터를 검색하는 방법이다.
      - 인덱스를 적용하고자 하는 칼럼 값의 분포가 전체 행의 1% 미만인 경우에 생성하게 된다.
      - 인덱스한 칼럼 값의 변화가 거의 없어야 한다. 인덱스 칼럼값의 변화가 발생하면 테이블 전체의 인덱스 데이터에 대해 인덱스를 다시 생성해야하므로 비용이 추가된다.
    클러스터링 인덱스
      - 클러스터링 이란 논리적으로 관련된 데이터를 물리적으로도 디스크상에 인접시켜 저장하는 것을 말한다.
      - 클러스터링은 관련된 데이터가 일반적으로 동시에 함께 사용된다는 특징을 이용하려는 것이다.
      - 클러스터링 인덱스는 키가 아닌 특정 필드 값을 정렬해서 그 값을 탐색 키로 이용한다. 키가 아닌 필드를 탐색 키로 이용하기 때문에 탐색 키의 값을 중복될 수있다.
      - 수정이 자주 발생되지 않는 칼럼을 사용하며, 하나의 테이블에는 단하나의 Cluster 인덱스를 생성할 수 있다.
      - 칼럼 값이 다량 범위의 데이터일 경우, 해당 칼럼의 다량 데이터에 대한 검색(예 : LIKE, BETWEEN 등)을 자주 하는 경우 생성한다.     

-------------------------------------------------------------------------------------------------------------------------------------

성능 향상을 위한 인덱스 관리

  - 인덱스 정보 확인

    1. DBA_INDEXES는 DBA 권한 으로 확인할 수 있는 뷰이다.
    2. USER_INDEXES는 일반 사용자 권한으로 자신이 생성한 인덱스 정보를 확인할수 있는 뷰이다.
    3. ALL_INDEXES는 일반 사용자 권한으로 다른 사용자가 생성한 인덱스 정보를 확인할수 있는 뷰이다.

  - 인덱스 재구축

    1. 존재하는 인덱스를 다른 테이블스페이스로 옮길 필요가 있는 경우
    2. 테이블과 인덱스가 같은 테이블스페이스에 존재하거나 객체를 디스크로부터 분산시킬 필요가 있는 경우
    3. 삭제된 테이블의 행이 많아 인덱스의 저장 공간이 반환되지 않고 사용할 수 없는 공간으로 남아 있는 경우

    예를들어, 존재했던 번호는 삭제되고 새로운 번호로 데이터가 추가되었을 경우, 기존의 인덱스에는 삭제된 번호의 저장 공간이 반환되지 않으므로 공간 활용 면에서 문제가 있다.
    이런 경우에는 인덱스를 재구축함으로써 공간을 효율적으로 활용하도록 한다.
  
    1. 기존 인덱스를 데이터 소스로 이용함으로써 인덱스 생성 시간을 단축시킬수 있다.
    2. 재구축 인덱스는 기존에 존재하는 인덱스를 데이터 소스로 하여 재구축한다.
    3. 신규로 인덱스를 생성할 경우보다 기존의 인덱스를 활용하여 생성하면 인덱스를 생성하는 속도가 더 향상된다.
    4. 기존 인덱스를 이용하여 재구축 인덱스를 만들었을 경우에는 정렬이 필요 없으므로 신규 인덱스를 만드는 것에 비해 속도가 향상된다.
    5. 기존의 인덱스를 삭제한 후 생성하는 경우가 아니므로 2개의 인덱스와 관련된 충분한 테이블스페이스 공간이 필요하다.
    6. 재구축 인덱스를 구축한 후 기존 인덱스를 제거한다. 따라서, 재구축 인덱스를 구축하는 동안 기족 인덱스 및 재구축 인덱스와 관련된 테이블스페이스에 대해서는 충분한
       공간이 필요하다.
    7. 재구축 인덱스는 삭제된 테이블 행의 정보를 포함하지 않기 때문에 공간을 효율적으로 사용한다. 기존 인덱스는 삭제된 테이블 행의 정보를 포함하고 있다.

-------------------------------------------------------------------------------------------------------------------------------------

역 정규화
  - 시스템 성능을 고려해서 기존 설계를 재구성하는 것

칼럼 역정규화(데이터의 중복)
  - 칼럼 역정규화는 이와는 반대로 테이블 간의 조인을 줄이고자 데이터의 중복을 허용하는 방법

-------------------------------------------------------------------------------------------------------------------------------------

요약 테이블 생성
  - 요약 테이블은 논리적 결합 작업으로 시스템의 성능이 저하되는 단점을 개선하려고 생성

-------------------------------------------------------------------------------------------------------------------------------------

관계형 데이터베이스 요소로 전환

논리적 설계(데이터 모델링)          물리적 설계         데이터베이스
엔티티                             테이블             테이블
속성                               칼럼               칼럼
주 식별자                          기본키              기본키
외래 식별자                        외래키              외래키
관계                              관계                외래키
관계의 카디날리티                  관계의 카디날리티
관계의 참여도                      관계의 참여도

-------------------------------------------------------------------------------------------------------------------------------------

테이블 기술서
  - 테이블 기술서는 개별 테이블에 대한 보다 자세한 문서화 수단