WHERE 개요
    - WHERE 절은 왜 필요한가?
        - 원하는 자료만을 검색하기 위해서 SQL 문장에 WHERE 절을 이용하여 자료들에 대하여 제한할 수있다.
        - WHERE 조건절을 사용하지 않고 필요 없는 많은 자료들을 데이터베이스로부터 요청하는 SQL문장은 대량의 데이터를 검색하기 위해 서버의
          CPU나 MEMORY와 같은 시스템 자원들을 과다하게 사용한다. 네트워크에 부하도 일으키게 된다.
        - 이런 문제점을 방지하기 위해 WHERE 절에 조건이 없는 FTS(FULL TABLE SCAN) 문장은 SQL 튜닝의 1차적인 검토 대상이 된다.
          (FTS가 무조건 나쁜것은 아니며 병렬 처리 등을 이용해 유용하게 사용하는 경우도 많다.)
    - SELECT ~ FROM ~ WHERE

-------------------------------------------------------------------------------------------------------------------------------------

연산자의 종류

    연산 우선 순위
        1. 괄호()
        2. NOT 연산자
        3. 비교연산자, SQL 비교 연산자
        4. AND
        5. OR

-------------------------------------------------------------------------------------------------------------------------------------

비교 연산자(참고: 문자 유형 비교 방법)

    - 비교 연산자의 양쪽이 모두 CHAR 유형 타입인 경우
        - 길이가 서로 다른 CHAR형 타입이면 작은 쪽엔 SPACE를 추가하여 길이를 같게 한 후에 비교한다.
        - 서로 다른 문자가 나올때까지 비교한다.
        - 달라진 첫 번째 문자의 값에 따라 크기를 결정한다.
        - BLANK의 수만 다르다면 서로 같은 값으로 결정한다.
    
    - 비교 연산자의 어느 한쪽이 VARCHAR 유형 타입인 경우
        - 서로 다른 문자가 나올 때까지 비교한다.
        - 길이가 다르다면 짧은 것이 끝날 때 까지만 비교한 후에 길이가 긴것이 크다고 판단한다.
        - 길이가 같고 다른 것이 없다면 같다고 판단한다.
        - VARCHAR는 NOT NULL가지 길이를 말한다.
    - 상수값과 비교할 경우
        -상수 쪽을 변수 타입과 동일 하게 바꾸고 비교한다.
        - 변수쪽이 CHAR유형 타입이면 위의 CHAR 유형 타입의 경우를 적용한다.
        - 변수 쪽이 VARCHAR 유형 타입이면 위의 VARCHAR 유형 타입의 경우를 적용한다.

-------------------------------------------------------------------------------------------------------------------------------------

SQL 연산자

    BETWEEN A AND B - A와 B의 값 사이에 있으면 된다. (A,B 값이 포함됨)
    IN(LIST) - 리스트에 있는 값중에서 하느 하나라도 일치하면 된다.
    LIKE '비교문자열' - 비교 문자열과 형태가 일치하면 된다.
    IS NULL - NULL값인 경우

    관련 연산
        - where team_id in('k02','k07')
        - where position like 'mf'
        - where height between 170 and 180

    - SELECT PLAYER_NAME 선수이름, POSITION 포지션, BACK_NO 백넘버, HEIGHT 키 FROM PLAYER WHERE (TEAM_ID = 'K02', OR TEAM_ID = 'K07') AND POSITION
      = 'MF' AND HEIGHT >=170 AND HEIGHT <= 180;
    - SELECT PLAYER_NAME 선수이름, POSITION 포지션, BACK_NO 백넘버, HEIGHT 키 FROM PLAYER WHERE TEAM_ID IN ('K02','K07') AND POSITON ='MF' AND HEIGHT
      BETWEEN 170 AND 180;

-------------------------------------------------------------------------------------------------------------------------------------

부정 논리 연산자

    !=  같지 않다
    ^=  같지 않다
    <>  같지 않다 (ANSI/ISO 표준, 모든 운영체제에서 사용가능)
    NOT 칼럼명 =  ~와 같지 않다
    NOT 칼럼명 > ~보다 크지 않다

부정 SQL 연산자

    NOT BETWEEN a AND b    a 와 b 값의 사이에 있지않다. (포함되어 있지 않다.)
    NOT IN (LIST)   LIST의 값과 일치하지 않는다
    IS NOT NULL   NULL 값을 가지지 않는다.

-------------------------------------------------------------------------------------------------------------------------------------

실습

    - SELECT PLAYER_NAME 선수이름, POSITION 포지션, BACK_NO 백넘버, HEIGHT 키 FROM PLAYER WHERE TEAM_ID = 'K02' AND NOT POSITION = 'MF'
      AND NOT EIGHT BETWEEN 175 AND 185;

    - SELECT PLAYER_NAME 선수이름, POSITION 포지션, BACK_NO 백넘버, HEIGHT 키, FROM PLAYER WHERE TEAM_ID = 'K02' AND POSITION <> 'MF' AND
      HEIGHT NOT BETWEEN 175 AND 185;

-------------------------------------------------------------------------------------------------------------------------------------

ROWNUM

    - Oracle ROWNUM은 칼럼과 비슷한 성격의 Pseudo Column으로써 SQL 처리 결과 집합의 각 행에 대해 임시로 부여되는 일련번호
    - 테이블이나 집합에서 원하는 만큼의 행만 가져오고 싶을때 WHERE 절에서 행의 개수를 제한하는 목적으로 사용(MYSQL LIMIT과 유사)
    - 1건의 행만 가져오고 싶다?
        - SELECT PLAYER_NAME FROM PLAYER WHERE ROWNUM = 1;
        - SELECT PLAYER_NAME FROM PLAYER WHERE ROWNUM <= 1;
        - SELECT PLAYER_NAME FROM PLAYER WHERE ROWNUM < 2;
    - 두 건 이상의 N행을 가져오고 싶을 때는?
        - SELECT PLAYER_NAME FROM PLAYER WHERE ROWNUM <= N;
        - SELECT PLAYER_NAME FROM PLAYER WHERE ROWNUM < N+1;

-------------------------------------------------------------------------------------------------------------------------------------

TOP 절
    - SQL SERVER TOP절을 사용하여 결과 집합으로 출력되는 행의 수 제한
    - TOP (Expression) [PERCENT] [WITH TIES]
        - Expression : 반환할 행의 수를 지정하는 숫자이다.
        - PERCENT : 쿼리 결과 집합에서 처음 Expression%의 행만 반환됨을 나타낸다.
        - WITH TIES : ORDER BY 절이 지정된 경우에만 사용할 수 있으며, TOPN(PERCENT)의 마지막 행과 같은 값이 있는 경우 추가 행이 출력되도록 지정
    - 한건의 행만 가져오고 싶을때
        - SELECT TOP(1) PLAYER_NAME FROM PLAYER;
        - SELECT TOP(N) PLAYER_NAME FROM PLAYER;