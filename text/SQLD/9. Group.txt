집계 함수
    
    특징
        - 여러 행들의 그룹이 모여서 그룹당 단 하나의 결과를 돌려주는 함수
        - SELECT 절, HAVING 절, ORDER BY 절에 사용 가능


COUNT(*) - NULL 값을 포함한 행의 수를 출력한다.
CONUNT(표현식) - 표현식의 값이 NULL 값인 것을 제외한 행의 수를 출력한다.
SUM([DISTINCT | ALL] 표현식) - 표현식의 NULL 값을 제외한 합계를 출력한다.
AVG([DISTINCT | ALL] 표현식) - 표현식의 NULL 값을 제외한 평균을 출력한다.
MAX([DISTINCT | ALL] 표현식) - 표현식의 최대값을 출력한다.
                               (문자, 날짜 데이터 타입도 사용가능)
MIN([DISTINCT | ALL] 표현식) - 표현식의 최소값을 출력한다.
                                (문자, 날짜 데이터 타입도 사용가능)
STDDEV([DISTINCT | ALL] 표현식) - 표현식의 표준 편차를 출력한다.
VARIAN([DISTINCT | ALL] 표현식) - 표현식의 분산을 출력한다.

-------------------------------------------------------------------------------------------------------------------------------------

특수경우

    - 일반적으로 집계 함수는 GROUP BY 절과 같이 사용되지만 아래와 같이 테이블 전체가 하나의 그룹이 되는 경우 GROUP BY 절 없이 단독으로 사용 가능

    - SELECT CONUNT(*) "전체 행수", COUNT(HEIGHT) "키 건수",
      MAX(HEIGHT) 최대키, MIN(HEIGHT) 최소키,
      ROUND(AVG(HEIGHT), 2) 평균키 FROM PLAYER;

-------------------------------------------------------------------------------------------------------------------------------------

GROUP BY 절

    - 언제 사용되나 ?
        - WHERE 절을 통해 조건에 맞는 데이터를 조회했지만 테이블에 1차적으로 존재하는 데이터 이외의 정보, 예를 들면 각 팀별로 선수가 몇명인지,
          선수들의 평균 신장과 몸무게가 얼마나 되는지, 또는 각 팀에서 가장 큰키의 선수가 누구인지 등의 2차 가공 정보도 필요하다.
        - GROUP BY 절은 SQL 문에서 FROM 절과 WHERE 절 뒤에 오며, 데이터들을 작은 그룹으로 분류하여 소그룹에 대한 항목별로 통계 정보를
          얻을때 추가로 사용된다.

    - 특징
        - GROUP BY 절을 통해 소그룹별 기준을 정한 후, SELECT 절에 집계 함수를 사용
        - 집계 함수의 통계 정보는 NULL 값을 가진 행을 제외하고 수행
        - GROUP BY 절에서는 SELECT 절과는 달리 ALIAS 명을 사용할 수 없음
        - 집계 함수는 WHERE 절에는 올 수 없음
            집계 함수를 사용할 수있는 GROUP BY 절보다 WHERE 절이 먼저 수행되므로!
        - WHERE 절은 전체 데이터를 GROUP으로 나누기 전에 행들을 미리 제거
        - GROUP BY 절에 의한 소그룹별로 만들어진 집계 데이터 중, HAVING 절에서 제한 조건을 두어 조건을 만족하는 내용만 출력
        - HAVING 절은 일반적으로 GROUP BY 절 뒤에 위치

-------------------------------------------------------------------------------------------------------------------------------------

실습

    - SELECT POSITION 포지션, AVG(HEIGHT) 평균키 FROM PLAYER; // 단일그룹의 그룹 함수가 아니다 라고 나옴
    - SELECT POSITION 포지션, AVG(HEIGHT) 평균키 FROM PLAYER GROUP BY POSITION 포지션;  // 오류 그룹바이는 ALIS 가 안된다.

        - SELECT POSITION 포지션, AVG(HEIGHT) 평균키 FROM PLAYER GROUP BY POSITION // ok~!

    - SELECT POSITION 포지션, COUNT(*) 인원수, COUNT(HEIGHT) 키대상, MAX(HEIGHT) 최대키, MIN(HEIGHT) 최소키, ROUND(AVG(HEIGHT),2) 평균키
      FROM PLAYER GROUP BY POSITION;

-------------------------------------------------------------------------------------------------------------------------------------

HAVING절

    GROUP과 WHERE절

        - K리그 선수들의 포지션별 평균키를 구하는데, 평균키가 180 센티미터 이상인 정보만 표시하고 싶으면?
            - SELECT POSITION 포지션, ROUND(AVG(HEIGHT),2) 평균키 FROM PLAYER WHERE AVG(HEIGHT) >= 180 GROUP BY POSITION;
                    이거는 그룹 함수 조건이 안됨
                WHERE -> GROUP BY -> HAVING
            - SELECT POSITION 포지션, ROUND(AVG(HEIGHT),2) FROM PLAYER GROUP BY POSITION HAVING AVG(HEIGHT) >= 180; // OK!
        

        - SELECT TEAM_ID 팀ID, COUNT(*) 인원수 FROM PLAYER WHERE TEAM_ID IN ('KO9','K02') GROUP BY TEAM_ID;
        - SELECT TEAM_ID 팀ID, COUNT(*) 인원수 FROM PLAYER GROUP BY TEAM_ID HAVING TEAM_ID IN ('K09','K02')
            - 같은 결과
            - GROUP BY의 계산량이 더 많기 때문에 HAVING 을 써서 거르는 것보다 WHERE에서 거르고 GROUP BY 를 하는것을 추천

-------------------------------------------------------------------------------------------------------------------------------------

CASE 표현을 활용한 월별 데이터 집계

    부서별로 월병 입사자의 평균 급여를 알고 싶다?

        - 월별 데이터 추출
            - SELECT ENAME, DEPTNO, EXTRACT(MONTH FROM HIREDATE) 입사월, SAL FROM EMP;

-------------------------------------------------------------------------------------------------------------------------------------

집계함수 와 NULL

    NULL을 언제 쓸 것인가?

        - 빈칸을 NULL이 아닌 ZERO로 표현하기 위해 NVL(Oracle)/ISNULL(SQLSERVER)함수를 사용하는 경우가 많음
        - 단, 다중 행 함수를 사용하는 경우는 오히려 불필요한 부하가 발생하므로 굳이 NVL 함수를 다중 행 함수 안에 사용할 필요가 없음