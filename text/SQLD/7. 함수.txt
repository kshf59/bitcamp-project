내장 함수(BUILT-IN FUNCTION) 개요

    함수의 분류
        - 벤더에서 제공하는 함수인 내장 함수(BUILT-IN FUNCTION)
        - 사용자가 정의할 수 있는 함수(USER DEFINED FUNCTION)
    SQL 내장함수
        - SQL을 더욱 강력하게 해주고 데이터 값을 간편하게 조작하는데 사용
        - 벤더별로 가장 큰 차이를 보이나, 핵심적인 기능들은 이름이나 표현법이 다르더라도
          대부분의 데이터베이스가 공통적으로 제공
        - 단일행 값이 입력되는 단일행 함수(SINGLE-ROW FUNCTION)
        - 여러 행의 값이 입력되는 다중행 함수(MULTI-ROW FUNCTION)
            - 집계 함수(Aggregate Function)
            - 그룹 함수(Group Function)
            - 윈도우 함수(Window Function)
    
    단일행 함수의 종류(oracle/sql server)

문자형 함수 문자를 입력하면 문자나 숫자 값을 반환한다. lower, upper, substr/susstring, length/len, ltrim. rtrim. trim, asc2
숫자형 함수 숫자를 입력하면 숫자값을 반환한다. abs, mod, round, turnc, sign, chr/char, ceil/ceiling, floor, exp, log, ln, power
                                           sin, cos, tan
날짜형 함수 date 타입의 값을 연산한다. sysdate/getdate, extract/datepart, to_number(to_char(d,'yyyy'|'mm'|'dd))
                                     / year|month|day
변환형 함수 문자, 숫자, 날짜형값의 데이터 타입을 변환한다. to_number, to_char, to_date/cast, convert
null 관련함수 null을 처리하기 위한 함수 nvl/isnull, nullif, coalesce

-------------------------------------------------------------------------------------------------------------------------------------

단일행 함수의 특징
    - select, where, order by 절에 사용 가능
    - 각 행(row)들에 대해 개별적으로 작용하여 데이터 값들을 조작하고, 각각의 행에 대한 조작 결과를 리턴
    - 여러 인자(Argument)를 입력해도 단 하나의 결과만 리턴 
    - 함수의 인자(Arguments)로 상수, 변수, 표현식이 사용 가능하고,하나의 인수를 가지는 경우도 있지만 여러개의 인수를 가질 수도 있음
    - 특별한 경우가 아니면 함수의 인자로 함수를 사용하는 함수의 중첩이 가능하다.

LOWER('SQL Eepert') = 'sql expert'
UPPER('SQL Expert') = 'SQL EXPERT'
ASCⅡ('A') = 65
CHR(65) / CHAR(65) = 'A'

CONCAT('RDBMS','SQL')
'RDBMS' || 'SQL' /    = 'RDBMS SQL'
'RDBMS' + 'SQL'

SUBSTR('SQL Expert',5,3)
SUBSTRING('SQL Expert',5,3)    =  'Exp'

LENGTH('SQL Expert') /
LEN('SQL Expert')     =  10

LTRIM('xxxYYZZxYZ','x') = 'YYZZxZZ'
RTRIM('XXYYzzYYzz','z') = 'XXYYzzXY'
TRIM('x' FROM 'xxYYZZxYZxx') = 'YYZZxYZ'

RTRIM('XXYYZZXYZ   ') = 'XXYYZZXYZ'
-> 공백 제거 및 CHAR와 VARCHAR 데이터 유형을 비교할 때 용이하게 사용된다.

-------------------------------------------------------------------------------------------------------------------------------------

DUAL 테이블
    - 사용자 SYS가 소유하며 모든 사용자가 엑세스 가능
    - SELECT ~ FROM ~ 의 형식을 갖추기 위한 일종의 DUMMY 테이블
    - SQL SERVER의 경우 SELECT 만으로도 SQL문장 실행 가능(DUAL 필요 X)

-------------------------------------------------------------------------------------------------------------------------------------

문자형 함수

    문자열 연결
        - SELECT CONCAT(PLAYER_NAME,'축구선수') 선수명 FROM PLAYER;
        - SELECT PLAYER_NAME || '축구선수' AS 선수명 FROM PLAYER;
        - SELECT PLAYER_NAME + '축구선수' AS 선수명 FROM PLAYER;
    함수의 중첩
        - 함수3 (함수2(함수1(칼럼이나 표현식[,Arg1])[,Arg2])[,Arg3])
        - SELECT STADIUM_ID, DDD||TEL AS TEL, LENGTH(DDD||TEL) AS T_LEN FROM STADIUM;

-------------------------------------------------------------------------------------------------------------------------------------

숫자형 함수

ABS(-15) = 15

SIGN(-20) = -1
SIGN(0) = 0
SIGN(+20) = 1

MOD(7,3) /
7%3         = 1

CEIL(38,123) /      =  39
CEILING(38, 123)    =  39
CEILING(-38, 123)   =  -38 

FLOOR(38,123)  = 38
FLOOR(-38,123)  = -39

ROUND(38,5235, 3) = 38.524
ROUND(38,5235, 1) = 38.5, 3
ROUND(38,5235, 0) = 39
ROUND(38,5235)   = 39 (인수 0이 DEFAULT)

TRUNC(38.5235, 3) = 38.523, 
TRUNC(38.5235, 1) = 38.5
TRUNC(38.5235, 0) = 38
TRUNC(38.5235) = 38(인수 0이 DEFAULT)

-------------------------------------------------------------------------------------------------------------------------------------

날짜형 함수

    - 개요
        - 데이터베이스는 날짜를 저장할 때 내부적으로 세기(century), 년(year), 월(month), 일(day), 시(hours), 분(minutes), 초(seconds)
          와 같은 숫자 형식으로 변환하여 저장
        - 날짜는 여러가지 형식으로 출력이 되고 날짜 계산에도 사용되기 때문에 그 편리성을 위해서 숫자형으로 저장하는 것
        - 날짜를 숫자로 저장하기 때문에 덧셈, 뺄셈 같은 살술 연산자로도 계산이 가능

    sysdate / getdate() - 현재 날짜와 시각을 출력한다.
    extract('year'|'month'|'day' from d)
    / datepart('year'|'month'|'day' d)  - 날짜데이터에서 년/월/일 데이터를 출력할수 있다. 시간/분/초 도 가능함

    to_number(to_char(d,'yyyy'))
    / year(d),
    to number(to_char(d,'mm'))
    / month(d),
    to_number(to_char(d,'dd'))
    /day(d)                       - 날짜 데이터에서 년/월/일 데이터를 출력할 수 있다.
                                    oracle extract year/month/day 옵션이나
                                    sql server depart year/month/day 옵션과 같은 기능이다.
                                    to_number 함수 제외시 문자형으로 출력됨

-------------------------------------------------------------------------------------------------------------------------------------

현재 날짜 반환
    
    - 현재 날짜 반환
        - select sysdate from dual; // oracle
        - select getdate() as currenttime; // sql server

    - select ename, hiredate,
      to_number(to_char(hiredate,'yyyy')) 입사년도,
      to_number(to_char(hiredate,'mm')) 입사월,
      to_number(to_char(hiredate,'dd')) 입사일
      from emp;

-------------------------------------------------------------------------------------------------------------------------------------

변환형 함수

명시적 데이터 유형 변환 - 데이터 변환형 함수로 데이터 유형을 변환하도록 명시해 주는 경우
암시적 데이터 유형 변환 - 데이터베이스가 자동으로 데이터 유형을 변환하여 계산하는 경우

    - 암시적 데이터 유형 변환의 경우 성능 저하가 발생할수 있으며, 자동적으로 데이터베이스가 알아서 계산하지 않는 경우가 있어
      에러를 발생할 수 있으므로 명시적인 데이터 유형 변환 방법을 사용하는 것이 바람직 하다.

변환형 함수 oracle

    to_number(문자열) = alphanumeric 문자열을 숫자로 변환한다.
    to_char(숫자|날짜[, format]) = 숫자나 날짜를 주어진 format 형태로 문자열 타입으로 변환한다.
    to date(문자열 [, format]) = 문자열을 주어진 format 형태로 날짜 타입으로 변환한다.

변환형 함수 sql server

    cast(expression as data_type[(length)])  = expression을 목표 데이터 유형으로 변환한다.
    convert(date_type [(length)]), expression[, style]) = expression 을 목표 데이터 유형으로 변환한다.         

실습

    - select to_char(sysdate, 'yyyy/mm/dd') 날짜, to_char(sysdate, 'yyyy.mon, day') 문자형 from dual;
    - select to_char(123456789/1200,'$999,999,999,99') 환율반영달러, to char(123456789,'l999,999,999') 원화 from dual;
    - select team_id, to_number(zip_code1,'999') + to number(zip_code2,'999') 우편번호합 from team;

-------------------------------------------------------------------------------------------------------------------------------------

case 표현

    - 개요
        - if-then-else
        - if sal > 2000 then revised_salary = sal else revised_salary = 2000 end-if.
        - select ename, case when sal > 2000 then sal else 2000 end revised_salary from emp;

case 
 simple_case_expression 조건
 else 표현절
end
    - simple_case_expression 조건이 맞으면 simple_case_expression 조건내의 then 절을 수행하고, 조건이 맞지 않으면 else 절을 수행

case 
 searched_case_expression 조건
 else 표현절
end
    - searched_case_expression 조건이 맞으면 searched_case_expression 조건내의 then 절을 수행하고, 조건이 맞지 않으면 else 절을 수행

decode(표현식, 기준값1, 값1
[, 기준값2, 값2, ... , 디폴트값)
    - oracle 에서만 사용되는 함수로, 표현식의 값이 기준값1이면 값1을 출력하고, 기준값2이면 값2를 출력한다. 그리고 기준값이 없으면 디폴트
      값을 출력한다. case 표현의 simple_case_expression 조건과 동일하다.

실습

    - select loc, case loc when 'new york' then 'east' when 'boston' then 'east' when 'chicago' then 'center' when 'dallas'
      then 'center' else 'etc' end as area from dept;

    - sele(ct ename, case when sal >= 3000 then 'high' when sal >= 1000 'mid' else 'low' end as salary_grade from emp

    - select ename, sal, case when sal >= 2000 then 1000 else (case when sal >= 1000 then 500 else 0 end) end as bonus from emp;

** 대소문자 구분함

-------------------------------------------------------------------------------------------------------------------------------------

NULL 관련 함수

    NULL의 특징
        - 널 값은 아직 정의되지 않은 값으로 0 또는 공백과 다르다.
            0은 숫자이고, 공백은 하나의 문자이다.
        - 테이블을 생성할때 NOT NULL 또는 PRIMARY KEY로 정의 되지 않은 모든 데이터 유형은 NULL 값을 포함할 수있다.
        - NULL 값을 포함하는 연산의 경우 결과 값도 NULL 값이다.
        - 결과 값을 NULL이 아닌 다른 값을 얻고자 할때 NVL/ISNULL 함수 사용
            NVL : oracle
            ISNULL : SQL SERVER
        - NULL 값의 대상이 숫자 유형 데이터인 경우는 주로 0(ZERO)으로, 문자 유형 데이터인 경우는 공백보다는 'X'같이 해당 시스템에서
          의미 없는 문자로 바꾸는 경우가 많다.

    NULL 포함 연산의 결과

    NULL + 2, 2 + NULL = NULL
    NULL - 2, 2 - NULL = NULL
    NULL * 2, 2 * NULL = NULL
    NULL / 2, 2 / NULL = NULL

    NVL(표현식1, 표현식2) /
    ISNULL(표현식1, 표현식2)
        - 표현식1의 결과값이 NULL이면 표현식2의 값을 출력한다.
          단, 표현식1과 표현식2의 결과 데이터 타입이 같아야 한다.
          NULL 관련 가장 많이 사용되는 함수이므로 상당히 중요하다.
    
    NULLIF(표현식1, 표현식2) - 표현식1이 표현식2와 같으면 NULL을, 같지 않으면 표현식 1을 리턴한다.

    COALESCE(표현식1, 표현식2, .....) - 임의의 개수 표현식에서 NULL이 아닌 최초의 표현식을 나타낸다.
                                       모든 표현식이 NULL 이라면 NULL을 리턴한다.

    실습
        - SELECT PLAYER_NAME 선수명, POSITION, NVL(POSITION,'없음') 포지션 FROM PLAYER WHERE TEAM_ID = 'K08';
        - SELECT PLAYER_NAME 선수명, POSITION, CASE WHEN POSITION ISNULL THEN '없음' ELSE POSITION END AS 포지션 FROM PLAYER
          WHERE TEAM_ID = 'K08';
        - SELECT ENAME 사원명, SAL 월급, COMM 커미션, (SAL * 12) + COMM 연봉A, (SQL * 12) + NVL(COMM,0) 연봉B FROM EMP;
        - NVL 함수의 고려사항
            NVL 함수를 다중행 함수의 인자로 사용하는 경우는 오히려 불필요한 부하를 발행할수 있으므로 굳이 NVL 함수를 사용할 필요X

-------------------------------------------------------------------------------------------------------------------------------------

NULLIF

    - NULLIF(EXPR1, EXPR2)
    - EXPR1이 EXPR2와 같으면 NULL을, 같지 않으면 EXPR1을 리턴
    - 특정 값을 NULL로 대체하는 경우에 유용ㅎ게 사용
    - SELECT ENAME, EMPNO, MGR, NULLIF(MGR,7698) NUIF FROM EMP;
    - SELECT ENAME, EMPNO, MGR, CASE WHEN MGR = 7698 THEN NULL ELSE MGR END NUIF FROM EMP;

-------------------------------------------------------------------------------------------------------------------------------------

COALESCE

    - 임의의 개수 EXPR에서 NULL이 아닌 최초의 EXPR을 나타낸다.
    - 만일 모든 EXPR이 NULL 이라면 NULL을 리턴한다.
    - COALESCE(EXPR1, EXPR2, ...)
    - SELECT ENAME, COMM, SAL, COALESCE(COMM, SAL) COAL FROM EMP;
    - SELECT ENMAE, COMM, SAL, CASE WHEN COMM IS NOT NULL THEN COMM ELSE (CASE WHEN SAL IS NOT NULL THEN SAL ELSE NULL END)
      END COAL FROM EMP;
