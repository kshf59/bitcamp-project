JOIN 개요

    JOIN의 필요성
        - 선수들의 소속팀에 대한 정보, 프로 축구팀의 전용구장에 대한 정보
        - 다른 정보가 들어있는 두개 이상의 테이블과 연결 또는 결합하여 데이터를 출력하는 경우가 빈번함
    
    JOIN의 개념
        - 두개 이상의 테이블 들을 연결 또는 결합ㅎ여 데이터를 출력하는 것
        - 일반적으로 사용되는 SQL 문장의 상당수가 JOIN 이라고 볼 수 있음
        - 정규화로 인해 분리된 테이블들을 다시 조립하기 위한 명령어
    
    JOIN의 원리
        - 일반적인 경우 행들은 PRIMARY KEY(PK)나 FOREIGN KEY(FK) 값의 연관에 의해 JOIN이 성립
        - 하지만 어떤 경우에는 이러한 PK, FK의 관계가 없어도 논리적인 값들의 연관만으로 JOIN 성립 가능

-------------------------------------------------------------------------------------------------------------------------------------

    JOIN의 주의사항
        - FROM절에 여러 테이블이 나열되더라도 SQL에서 데이터를 처리할 때는 단 두개의 집합 간에만 조인이 일어난다는 것
        - FROM 절에 A,B,C 테이블이 나열되었더라도 특정 2개의 테이블만 먼저 조인 처리되고, 2개의 테이블이 조인되어서
          처리된 새로운 데이터 집합과 남은 한개의 테이블이 다음 차례로 조인되는 것
        - 예를 들면 A,B,C,D 4개의 테이블을 조인하고자 할 경우 옵티마이저는
          ((A JOIN D) JOIN C)JOIN B)와 같이 순차적으로 조인을 처리
        - 이때 테이블의 조인 순서는 옵티마이저에 의해서 결정되고, 이것이 주요 튜닝 포인트가 됨

-------------------------------------------------------------------------------------------------------------------------------------

EQUI(등가) JOIN

    형태
        - 두개의 테이블 간에 칼럼 값들이 서로 정확하게 일치하는 경우에 사용
        - INNER JOIN 이라고도 함
        - 대부분 PK <-> FK 관계를 기반으로 함
            그러나 일반적으로 테이블 설계 시에 나타난 PK <-> FK 의 관계를 이용하는 것이지
            반드시 PK <-> FK의 관계로만 EQUI JOIN이 성립하는 것은 아님
        - JOIN의 조건은 WHERE 절에 기술하게 되는데 "=" 연산자로 표현
            - SELECT 테이블1.칼럼명, 테이블2.칼럼명, ....
              FROM 테이블1, 테이블2
              WHERE 테이블1.칼럼명1 = 테이블2.칼럼명2;
            - SELECT 테이블1.칼럼명, 테이블2.칼럼명, ...
              FROM 테이블1 INNER JOIN 테이블2
              ON 테이블1.칼럼명1 = 테이블2.칼럼명2;

-------------------------------------------------------------------------------------------------------------------------------------

    예제 분석
        - SELECT PLAYER.PLAYER_NAME 선수명, TEAM.TEAM_NAME 소속팀명
          FROM PLAYER, TEAM
          WHERE PLAYER.TEAM_ID = TEAM.TEAM_ID;
        - 테이블명.칼럼명
            - 에러 방지 및 가독성 높임
        - N개의 테이블을 JOIN하기 위해서는 N-1개의 조건이 필요

-------------------------------------------------------------------------------------------------------------------------------------

    선수-팀 EQUI JOIN 사례
        - SELECT PLAYER.PLAYER_NAME, PLAYER.BACK_NO, PLAYER.TEAM_ID, TEAM.TEAM_NAME, TEAM.REGION_NAME
          FROM PLAYER, TEAM
          WHERE PLAYER.TEAM_ID = TEAM.TEAM_ID;
        
        - SELECT P.PLAYER_NAME 선수명, P.BACK_NO 백넘버, P.TEAM_ID 팀코드, T.TEAM_NAME 팀명, T.REGION_NAME 연고지
          FROM PLAYER P, TEAM T
          WHERE P. TEAM_ID = T.TEAM_ID;
            - ALIAS 사용

        - SELECT P.PLAYER_NAME 선수명, P.BACK_NO 백넘버, T.REGION_NAME 연고지, T.TEAM_NAME 팀명
          FROM PLAYER P, TEAM T
          WHERE P.TEAM_ID = T.TEAM_ID AND P.POSITION = 'GK'
          ORDER BY P.BACK_NO;

        - SELECT P.PLAYER_NAME 선수명, P.BACK_NO 백넘버, T.REGION_NAME 연고지, T.TEAM_NAME 팀명
          FROM PLAYER P, TEAM T 
          WHERE P.TEAM_ID = T.TEAM_ID AND P.POSITION = 'GK'
          ORDER BY P.BACK_NOL

-------------------------------------------------------------------------------------------------------------------------------------

    팀-구장 EQUI JOIN 사례

        - SELECT T.REGION_NAME, T.TEAM_NAME, T.STADIUM_ID, S.STADIUM_NAME, S.SEAT_COUNT
          FROM TEAM T INNER JOIN STADIUM S
          ON T.STADIUM_ID = S.STADIUM_ID;

-------------------------------------------------------------------------------------------------------------------------------------

NON EQUI JOIN

    개념
        - 두 개의 테이블 간에 칼럼 값들이 서로 정확하게 일치하지 않는 경우
        - "=" 연산자가 아닌 다른(BETWEEN, >, >=, <, <= 등) 연산자들을 사용

    사례 분석
        - 사원들의 급여가 급여등급(SALGRADE) 테이블의 등급(GRADE)으로 표시되기 위해서는 "=" 연산자로 JOIN 이용할수 없음
        - 사원 테이블에 들어 있는 데이터를 기준으로 급여등급 테이블의 어느 등급에 속하는지 1:1로 임시 매칭해보면 변형 가능

    - SELECT E.ENAME 사원명, E.SAL 급여, S.GRADE
      FROM EMP E, SALGRADE S
      WHERE E.SAL BETWEEN S.LOSAL AND S.HISAL;       